[gd_resource type="ShaderMaterial" load_steps=27 format=2]

[ext_resource path="res://Tools/ShaderNodes/position_obj_space_transform.gd" type="Script" id=1]
[ext_resource path="res://Tools/ShaderNodes/camera_position_world_space.gd" type="Script" id=2]
[ext_resource path="res://Tools/ShaderNodes/position_obj_space.gd" type="Script" id=3]
[ext_resource path="res://Tools/ShaderNodes/position_world_space.gd" type="Script" id=4]
[ext_resource path="res://Assets/grass_terrain.png" type="Texture" id=5]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeColorUniform" id=2]
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeCustom" id=6]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=7]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id=9]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeBooleanUniform" id=10]
uniform_name = "Enable"

[sub_resource type="VisualShaderNodeExpression" id=11]
size = Vector2( 530, 290 )
expression = "if (cond) {
  output20 = on;
} else {
  output20 = off;
}"

[sub_resource type="VisualShaderNodeCustom" id=12]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "Curvature"

[sub_resource type="VisualShaderNodeScalarOp" id=14]

[sub_resource type="VisualShaderNodeCustom" id=15]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=17]

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 5.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarFunc" id=19]
function = 19

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 9.0 ]
operator = 2

[sub_resource type="VisualShader" id=21]
code = "shader_type spatial;
render_mode skip_vertex_transform;

uniform bool Enable;
uniform float Curvature;
uniform vec4 ColorUniform : hint_color;
uniform sampler2D TextureUniform;


// ObjectPositionWorldSpace

// CameraPositionWorldSpace

// PositionObjectSpaceTransform

// PositionObjectSpace


void vertex() {
// BooleanUniform:22
	bool n_out22p0 = Enable;

// ObjectPositionWorldSpace:3
	vec3 n_out3p0;
	{
		n_out3p0 = ((WORLD_MATRIX * MODELVIEW_MATRIX) * vec4(VERTEX, 1.0)).xyz;
	}

// ScalarUniform:25
	float n_out25p0 = Curvature;

// ScalarFunc:8
	float n_out8p0 = -(n_out25p0);

// CameraPositionWorldSpace:2
	vec3 n_out2p0;
	{
		n_out2p0 = vec3(INV_CAMERA_MATRIX[0][3], INV_CAMERA_MATRIX[1][3], INV_CAMERA_MATRIX[2][3]);
	}

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 - n_out2p0;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// ScalarOp:6
	float n_in6p1 = 2.00000;
	float n_out6p0 = pow(n_out5p1, n_in6p1);

// ScalarOp:9
	float n_out9p0 = n_out8p0 * n_out6p0;

// VectorCompose:10
	float n_in10p0 = 0.00000;
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_in10p0, n_out9p0, n_in10p2);

// VectorOp:11
	vec3 n_out11p0 = n_out3p0 + n_out10p0;

// PositionObjectSpaceTransform:17
	vec3 n_out17p0;
	{
		n_out17p0 = (inverse(WORLD_MATRIX) * vec4(n_out11p0, 1.0)).xyz;
	}

// PositionObjectSpace:24
	vec3 n_out24p0;
	{
		n_out24p0 = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	}

// Expression:23
	vec3 n_out23p0;
	n_out23p0 = vec3(0.0, 0.0, 0.0);
	{
		if (n_out22p0) {
		  n_out23p0 = n_out17p0;
		} else {
		  n_out23p0 = n_out24p0;
		}
	}

// Output:0
	VERTEX = n_out23p0;

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = ColorUniform.rgb;
	float n_out3p1 = ColorUniform.a;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * n_out2p0;

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 441, -294 )
flags/skip_vertex_transform = true
nodes/vertex/0/position = Vector2( 1880, -120 )
nodes/vertex/2/node = SubResource( 9 )
nodes/vertex/2/position = Vector2( -1100, 240 )
nodes/vertex/3/node = SubResource( 15 )
nodes/vertex/3/position = Vector2( -1060, -160 )
nodes/vertex/4/node = SubResource( 16 )
nodes/vertex/4/position = Vector2( -680, 200 )
nodes/vertex/5/node = SubResource( 17 )
nodes/vertex/5/position = Vector2( -480, 200 )
nodes/vertex/6/node = SubResource( 18 )
nodes/vertex/6/position = Vector2( -220, 200 )
nodes/vertex/8/node = SubResource( 19 )
nodes/vertex/8/position = Vector2( -220, 100 )
nodes/vertex/9/node = SubResource( 20 )
nodes/vertex/9/position = Vector2( 20, 140 )
nodes/vertex/10/node = SubResource( 4 )
nodes/vertex/10/position = Vector2( 380, 40 )
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( 660, -200 )
nodes/vertex/17/node = SubResource( 6 )
nodes/vertex/17/position = Vector2( 880, -160 )
nodes/vertex/18/node = SubResource( 7 )
nodes/vertex/18/position = Vector2( -220, -60 )
nodes/vertex/19/node = SubResource( 8 )
nodes/vertex/19/position = Vector2( 0, -40 )
nodes/vertex/22/node = SubResource( 10 )
nodes/vertex/22/position = Vector2( 960, -240 )
nodes/vertex/23/node = SubResource( 11 )
nodes/vertex/23/position = Vector2( 1260, -200 )
nodes/vertex/23/size = Vector2( 530, 290 )
nodes/vertex/23/input_ports = "0,2,cond;1,1,on;2,1,off;"
nodes/vertex/23/output_ports = "0,1,output20;"
nodes/vertex/23/expression = "if (cond) {
  output20 = on;
} else {
  output20 = off;
}"
nodes/vertex/24/node = SubResource( 12 )
nodes/vertex/24/position = Vector2( 960, -80 )
nodes/vertex/25/node = SubResource( 13 )
nodes/vertex/25/position = Vector2( -460, 80 )
nodes/vertex/26/node = SubResource( 14 )
nodes/vertex/26/position = Vector2( 220, -60 )
nodes/vertex/connections = PoolIntArray( 4, 0, 5, 0, 10, 0, 11, 1, 11, 0, 17, 0, 2, 0, 4, 1, 6, 0, 9, 1, 5, 1, 6, 0, 8, 0, 9, 0, 18, 0, 19, 0, 8, 0, 19, 1, 22, 0, 23, 0, 17, 0, 23, 1, 3, 0, 4, 0, 3, 0, 11, 0, 23, 0, 0, 0, 24, 0, 23, 2, 25, 0, 8, 0, 5, 0, 18, 0, 9, 0, 26, 0, 19, 0, 26, 1, 9, 0, 10, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -120, 220 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -100, 420 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 156.615, 411.5 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 4, 0, 0, 0 )

[resource]
shader = SubResource( 21 )
shader_param/Enable = true
shader_param/Curvature = 1.0
shader_param/ColorUniform = Color( 0.478431, 0.764706, 0.388235, 1 )
shader_param/TextureUniform = ExtResource( 5 )
