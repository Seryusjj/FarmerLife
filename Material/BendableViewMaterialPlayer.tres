[gd_resource type="ShaderMaterial" load_steps=25 format=2]

[ext_resource path="res://Assets/PlayerColor.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeColorUniform" id=2]
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="GDScript" id=6]
script/source = "# PerlinNoise3D.gd
tool
extends VisualShaderNodeCustom
class_name PositionObjectSpaceTransform


func _get_name():
	return \"PositionObjectSpaceTransform\"


func _get_category():
	return \"CustomTools\"


func _get_description():
	return \"Return the current vertex position in object space when in a vertex shader\"


func _get_return_icon_type():
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_input_port_count():
	return 1


func _get_input_port_name(port):
	return \"Position\"


func _get_input_port_type(port):
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_output_port_count():
	return 1


func _get_output_port_name(port):
	return \"ObjectPosition\"


func _get_output_port_type(port):
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_global_code(mode):
	return \"\"\"\"\"\"


func _get_code(input_vars, output_vars, mode, type):
	return output_vars[0] + \" = (inverse(WORLD_MATRIX) * vec4(%s, 1.0)).xyz;\" % [input_vars[0]]
"

[sub_resource type="VisualShaderNodeCustom" id=7]
initialized = true
script = SubResource( 6 )

[sub_resource type="VisualShaderNodeBooleanUniform" id=8]
uniform_name = "Enable"

[sub_resource type="VisualShaderNodeExpression" id=9]
size = Vector2( 530, 290 )
expression = "if (cond) {
  output20 = on;
} else {
  output20 = off;
}"

[sub_resource type="GDScript" id=10]
script/source = "# PerlinNoise3D.gd
tool
extends VisualShaderNodeCustom
class_name PositionObjectSpace


func _get_name():
	return \"PositionObjectSpace\"


func _get_category():
	return \"CustomTools\"


func _get_description():
	return \"Return the current object position\"


func _get_return_icon_type():
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_input_port_count():
	return 0


func _get_input_port_name(port):
	return \"\"


func _get_input_port_type(port):
	return \"\"


func _get_output_port_count():
	return 1


func _get_output_port_name(port):
	return \"ObjectPosition\"


func _get_output_port_type(port):
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_global_code(mode):
	return \"\"\"\"\"\"


func _get_code(input_vars, output_vars, mode, type):
	return output_vars[0] + \" = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;\"
"

[sub_resource type="VisualShaderNodeCustom" id=11]
initialized = true
script = SubResource( 10 )

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Curvature"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=15]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="GDScript" id=17]
script/source = "# PerlinNoise3D.gd
tool
extends VisualShaderNodeCustom
class_name PositionWorldSpace


func _get_name():
	return \"ObjectPositionWorldSpace\"


func _get_category():
	return \"CustomTools\"


func _get_description():
	return \"Return the current vertex position in world space when in a vertex shader\"


func _get_return_icon_type():
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_input_port_count():
	return 0


func _get_input_port_name(port):
	return \"\"


func _get_input_port_type(port):
	return \"\"


func _get_output_port_count():
	return 1


func _get_output_port_name(port):
	return \"WorldPosition\"


func _get_output_port_type(port):
	return VisualShaderNode.PORT_TYPE_VECTOR


func _get_global_code(mode):
	return \"\"\"\"\"\"


func _get_code(input_vars, output_vars, mode, type):
	return output_vars[0] + \" = ((WORLD_MATRIX * MODELVIEW_MATRIX) * vec4(VERTEX, 1.0)).xyz;\"
"

[sub_resource type="VisualShaderNodeCustom" id=18]
initialized = true
script = SubResource( 17 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=19]
uniform_name = "PlayerGlobalPosition"

[sub_resource type="VisualShaderNodeVectorOp" id=20]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
function = 19

[sub_resource type="VisualShader" id=23]
code = "shader_type spatial;
render_mode specular_schlick_ggx, skip_vertex_transform;

uniform bool Enable;
uniform float Curvature;
uniform vec3 PlayerGlobalPosition;
uniform vec4 ColorUniform : hint_color;
uniform sampler2D TextureUniform;


// ObjectPositionWorldSpace

// PositionObjectSpaceTransform

// PositionObjectSpace


void vertex() {
// BooleanUniform:22
	bool n_out22p0 = Enable;

// ObjectPositionWorldSpace:3
	vec3 n_out3p0;
	{
		n_out3p0 = ((WORLD_MATRIX * MODELVIEW_MATRIX) * vec4(VERTEX, 1.0)).xyz;
	}

// ScalarUniform:25
	float n_out25p0 = Curvature;

// ScalarFunc:8
	float n_out8p0 = -(n_out25p0);

// VectorUniform:30
	vec3 n_out30p0 = PlayerGlobalPosition;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 - n_out30p0;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// ScalarOp:27
	float n_in27p1 = 2.00000;
	float n_out27p0 = pow(n_out5p2, n_in27p1);

// ScalarOp:29
	float n_in29p1 = 2.00000;
	float n_out29p0 = pow(n_out5p0, n_in29p1);

// ScalarOp:28
	float n_out28p0 = n_out27p0 + n_out29p0;

// ScalarOp:26
	float n_out26p0 = n_out8p0 * n_out28p0;

// VectorCompose:10
	float n_in10p0 = 0.00000;
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_in10p0, n_out26p0, n_in10p2);

// VectorOp:11
	vec3 n_out11p0 = n_out3p0 + n_out10p0;

// PositionObjectSpaceTransform:17
	vec3 n_out17p0;
	{
		n_out17p0 = (inverse(WORLD_MATRIX) * vec4(n_out11p0, 1.0)).xyz;
	}

// PositionObjectSpace:24
	vec3 n_out24p0;
	{
		n_out24p0 = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	}

// Expression:23
	vec3 n_out23p0;
	n_out23p0 = vec3(0.0, 0.0, 0.0);
	{
		if (n_out22p0) {
		  n_out23p0 = n_out17p0;
		} else {
		  n_out23p0 = n_out24p0;
		}
	}

// Output:0
	VERTEX = n_out23p0;

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = ColorUniform.rgb;
	float n_out3p1 = ColorUniform.a;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * n_out2p0;

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -623, -21 )
flags/skip_vertex_transform = true
nodes/vertex/0/position = Vector2( 1880, -120 )
nodes/vertex/3/node = SubResource( 18 )
nodes/vertex/3/position = Vector2( -1020, -180 )
nodes/vertex/4/node = SubResource( 20 )
nodes/vertex/4/position = Vector2( -640, 140 )
nodes/vertex/5/node = SubResource( 21 )
nodes/vertex/5/position = Vector2( -420, 160 )
nodes/vertex/8/node = SubResource( 22 )
nodes/vertex/8/position = Vector2( -160, 0 )
nodes/vertex/10/node = SubResource( 4 )
nodes/vertex/10/position = Vector2( 560, 80 )
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( 600, -200 )
nodes/vertex/17/node = SubResource( 7 )
nodes/vertex/17/position = Vector2( 880, -160 )
nodes/vertex/22/node = SubResource( 8 )
nodes/vertex/22/position = Vector2( 960, -240 )
nodes/vertex/23/node = SubResource( 9 )
nodes/vertex/23/position = Vector2( 1260, -200 )
nodes/vertex/23/size = Vector2( 530, 290 )
nodes/vertex/23/input_ports = "0,2,cond;1,1,on;2,1,off;"
nodes/vertex/23/output_ports = "0,1,output20;"
nodes/vertex/23/expression = "if (cond) {
  output20 = on;
} else {
  output20 = off;
}"
nodes/vertex/24/node = SubResource( 11 )
nodes/vertex/24/position = Vector2( 960, -80 )
nodes/vertex/25/node = SubResource( 12 )
nodes/vertex/25/position = Vector2( -380, 0 )
nodes/vertex/26/node = SubResource( 13 )
nodes/vertex/26/position = Vector2( 300, 80 )
nodes/vertex/27/node = SubResource( 14 )
nodes/vertex/27/position = Vector2( -180, 280 )
nodes/vertex/28/node = SubResource( 15 )
nodes/vertex/28/position = Vector2( 60, 220 )
nodes/vertex/29/node = SubResource( 16 )
nodes/vertex/29/position = Vector2( -160, 140 )
nodes/vertex/30/node = SubResource( 19 )
nodes/vertex/30/position = Vector2( -980, 200 )
nodes/vertex/connections = PoolIntArray( 11, 0, 17, 0, 22, 0, 23, 0, 17, 0, 23, 1, 3, 0, 11, 0, 23, 0, 0, 0, 24, 0, 23, 2, 25, 0, 8, 0, 3, 0, 4, 0, 10, 0, 11, 1, 4, 0, 5, 0, 5, 0, 29, 0, 30, 0, 4, 1, 5, 2, 27, 0, 8, 0, 26, 0, 26, 0, 10, 1, 29, 0, 28, 1, 27, 0, 28, 0, 28, 0, 26, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -120, 220 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -100, 420 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 156.615, 411.5 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 4, 0, 0, 0 )

[resource]
shader = SubResource( 23 )
shader_param/Enable = true
shader_param/Curvature = 0.003
shader_param/PlayerGlobalPosition = Vector3( 0, 0.862457, 1.12335 )
shader_param/ColorUniform = Color( 0.905882, 0.866667, 0.866667, 1 )
shader_param/TextureUniform = ExtResource( 1 )
